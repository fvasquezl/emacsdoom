Super config

* General settings
** Dont show startup messages
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC
** Dont show toolbar
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC
** Dont show menubar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   #+END_SRC
** Dont show scroll bar
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   #+END_SRC
** Global hl enabled
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode +1)
   #+END_SRC
** Delete Selection
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode 1)
   #+END_SRC
** Different backup directory
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." ."~/.saves")))
   #+END_SRC
** Display line numbers when programming
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Show matching parenthesis
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC

* UI
** Team
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
   :ensure t
   :config
   (load-theme 'doom-one t))
   #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
   :ensure t
   :hook (after-init . doom-modeline-mode))
   #+END_SRC
** Icons
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
   :ensure t)
   #+END_SRC
* Modes
** IDO 
   #+BEGIN_SRC emacs-lisp
   (setq ido-everywhere t)
   (setq ido-enable-flex-matching t)
   (ido-mode t)
   #+END_SRC
* General packages
** wich key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
   :ensure t
   :config(which-key-mode))
   #+END_SRC
** ProjectTile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
   :ensure t
   :config
   (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
   (projectile-mode +1))
   #+END_SRC

** Helm ProjectTile
   #+BEGIN_SRC emacs-lisp
   (use-package helm-projectile
   :ensure t
   :config (helm-projectile-on))
   #+END_SRC

** Dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
   :ensure t
   :init
   (progn
   (setq dashboard-items '((recents . 3)
   (projects . 3)))
   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-show-shortcuts nil)
   (setq dashboard-center-content nil)
   (setq dashboard-banner-logo-title "Hi fellas, follow me")
   (setq dashboard-startup-banner "~/.emacs.d/images/yo.png")
   (setq dashboard-set-navigator t)
   (setq dashboard-navigator-buttons
   `(;; line1
   ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
   "Homepage"
   "Browse homepage"
   (lambda (&rest _) (browse-url "https://github.com/fvasquezl")))
   ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
   ("?" "" "?/h" #'show-help nil "<" ">"))
   ;; line 2
   ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
   "Linkedin"
   "https://www.linkedin.com/in/faustino-vasquez-limon-24121a133/"
   (lambda (&rest _) (browse-url "homepage")))
   ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))
   
   )
   :config
   (dashboard-setup-startup-hook)
   )
   #+END_SRC

** NeoTree
   #+BEGIN_SRC emacs-lisp
   (use-package neotree
   :ensure t
   :config
   (progn
   (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
   (setq neo-smart-open t)
   (setq projectile-switch-project-action 'neotree-projectile-action)
  :bind
  (("C-b" . 'neotree-toggle)))
   #+END_SRC
